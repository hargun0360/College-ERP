{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { useUtils } from './useUtils';\nimport { useOpenState } from './useOpenState';\nimport { getDisplayDate, validate } from '../../_helpers/text-field-helper';\nimport { useCallback, useDebugValue, useEffect, useMemo, useState, useRef } from 'react';\n\nvar useValueToDate = function useValueToDate(utils, _ref) {\n  var value = _ref.value,\n      initialFocusedDate = _ref.initialFocusedDate;\n  var nowRef = useRef(utils.date());\n  var date = utils.date(value || initialFocusedDate || nowRef.current);\n  return date && utils.isValid(date) ? date : nowRef.current;\n};\n\nfunction useDateValues(props, options) {\n  var utils = useUtils();\n  var date = useValueToDate(utils, props);\n  var format = props.format || options.getDefaultFormat();\n  return {\n    date: date,\n    format: format\n  };\n}\n\nexport function usePickerState(props, options) {\n  var autoOk = props.autoOk,\n      disabled = props.disabled,\n      onAccept = props.onAccept,\n      _onChange = props.onChange,\n      onError = props.onError,\n      value = props.value,\n      variant = props.variant;\n  var utils = useUtils();\n\n  var _useOpenState = useOpenState(props),\n      isOpen = _useOpenState.isOpen,\n      setIsOpen = _useOpenState.setIsOpen;\n\n  var _useDateValues = useDateValues(props, options),\n      date = _useDateValues.date,\n      format = _useDateValues.format;\n\n  var _useState = useState(date),\n      _useState2 = _slicedToArray(_useState, 2),\n      pickerDate = _useState2[0],\n      setPickerDate = _useState2[1];\n\n  useEffect(function () {\n    // if value was changed in closed state - treat it as accepted\n    if (!isOpen && !utils.isEqual(pickerDate, date)) {\n      setPickerDate(date);\n    }\n  }, [date, isOpen, pickerDate, utils]);\n  var acceptDate = useCallback(function (acceptedDate) {\n    setIsOpen(false);\n\n    _onChange(acceptedDate);\n\n    if (onAccept) {\n      onAccept(acceptedDate);\n    }\n  }, [onAccept, _onChange, setIsOpen]);\n  var wrapperProps = useMemo(function () {\n    return {\n      format: format,\n      open: isOpen,\n      onClear: function onClear() {\n        return acceptDate(null);\n      },\n      onAccept: function onAccept() {\n        return acceptDate(pickerDate);\n      },\n      onSetToday: function onSetToday() {\n        return setPickerDate(utils.date());\n      },\n      onDismiss: function onDismiss() {\n        setIsOpen(false);\n      }\n    };\n  }, [acceptDate, format, isOpen, pickerDate, setIsOpen, utils]);\n  var pickerProps = useMemo(function () {\n    return {\n      date: pickerDate,\n      onChange: function onChange(newDate) {\n        var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        setPickerDate(newDate);\n\n        if (isFinish && autoOk) {\n          acceptDate(newDate);\n          return;\n        } // simulate autoOk, but do not close the modal\n\n\n        if (variant === 'inline' || variant === 'static') {\n          _onChange(newDate);\n\n          onAccept && onAccept(newDate);\n        }\n      }\n    };\n  }, [acceptDate, autoOk, onAccept, _onChange, pickerDate, variant]);\n  var validationError = validate(value, utils, props);\n  useEffect(function () {\n    if (validationError && onError) {\n      onError(validationError, value);\n    }\n  }, [onError, validationError, value]);\n  var inputValue = getDisplayDate(date, format, utils, value === null, props);\n  var inputProps = useMemo(function () {\n    return {\n      inputValue: inputValue,\n      validationError: validationError,\n      onClick: function onClick() {\n        return !disabled && setIsOpen(true);\n      }\n    };\n  }, [disabled, inputValue, setIsOpen, validationError]);\n  var pickerState = {\n    pickerProps: pickerProps,\n    inputProps: inputProps,\n    wrapperProps: wrapperProps\n  };\n  useDebugValue(pickerState);\n  return pickerState;\n}","map":{"version":3,"sources":["E:/College-ERP/node_modules/@material-ui/pickers/esm/_shared/hooks/usePickerState.js"],"names":["_slicedToArray","useUtils","useOpenState","getDisplayDate","validate","useCallback","useDebugValue","useEffect","useMemo","useState","useRef","useValueToDate","utils","_ref","value","initialFocusedDate","nowRef","date","current","isValid","useDateValues","props","options","format","getDefaultFormat","usePickerState","autoOk","disabled","onAccept","_onChange","onChange","onError","variant","_useOpenState","isOpen","setIsOpen","_useDateValues","_useState","_useState2","pickerDate","setPickerDate","isEqual","acceptDate","acceptedDate","wrapperProps","open","onClear","onSetToday","onDismiss","pickerProps","newDate","isFinish","arguments","length","undefined","validationError","inputValue","inputProps","onClick","pickerState"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,kCAAzC;AACA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,SAArC,EAAgDC,OAAhD,EAAyDC,QAAzD,EAAmEC,MAAnE,QAAiF,OAAjF;;AAEA,IAAIC,cAAc,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,IAA/B,EAAqC;AACxD,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,kBAAkB,GAAGF,IAAI,CAACE,kBAD9B;AAEA,MAAIC,MAAM,GAAGN,MAAM,CAACE,KAAK,CAACK,IAAN,EAAD,CAAnB;AACA,MAAIA,IAAI,GAAGL,KAAK,CAACK,IAAN,CAAWH,KAAK,IAAIC,kBAAT,IAA+BC,MAAM,CAACE,OAAjD,CAAX;AACA,SAAOD,IAAI,IAAIL,KAAK,CAACO,OAAN,CAAcF,IAAd,CAAR,GAA8BA,IAA9B,GAAqCD,MAAM,CAACE,OAAnD;AACD,CAND;;AAQA,SAASE,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuC;AACrC,MAAIV,KAAK,GAAGX,QAAQ,EAApB;AACA,MAAIgB,IAAI,GAAGN,cAAc,CAACC,KAAD,EAAQS,KAAR,CAAzB;AACA,MAAIE,MAAM,GAAGF,KAAK,CAACE,MAAN,IAAgBD,OAAO,CAACE,gBAAR,EAA7B;AACA,SAAO;AACLP,IAAAA,IAAI,EAAEA,IADD;AAELM,IAAAA,MAAM,EAAEA;AAFH,GAAP;AAID;;AAED,OAAO,SAASE,cAAT,CAAwBJ,KAAxB,EAA+BC,OAA/B,EAAwC;AAC7C,MAAII,MAAM,GAAGL,KAAK,CAACK,MAAnB;AAAA,MACIC,QAAQ,GAAGN,KAAK,CAACM,QADrB;AAAA,MAEIC,QAAQ,GAAGP,KAAK,CAACO,QAFrB;AAAA,MAGIC,SAAS,GAAGR,KAAK,CAACS,QAHtB;AAAA,MAIIC,OAAO,GAAGV,KAAK,CAACU,OAJpB;AAAA,MAKIjB,KAAK,GAAGO,KAAK,CAACP,KALlB;AAAA,MAMIkB,OAAO,GAAGX,KAAK,CAACW,OANpB;AAOA,MAAIpB,KAAK,GAAGX,QAAQ,EAApB;;AAEA,MAAIgC,aAAa,GAAG/B,YAAY,CAACmB,KAAD,CAAhC;AAAA,MACIa,MAAM,GAAGD,aAAa,CAACC,MAD3B;AAAA,MAEIC,SAAS,GAAGF,aAAa,CAACE,SAF9B;;AAIA,MAAIC,cAAc,GAAGhB,aAAa,CAACC,KAAD,EAAQC,OAAR,CAAlC;AAAA,MACIL,IAAI,GAAGmB,cAAc,CAACnB,IAD1B;AAAA,MAEIM,MAAM,GAAGa,cAAc,CAACb,MAF5B;;AAIA,MAAIc,SAAS,GAAG5B,QAAQ,CAACQ,IAAD,CAAxB;AAAA,MACIqB,UAAU,GAAGtC,cAAc,CAACqC,SAAD,EAAY,CAAZ,CAD/B;AAAA,MAEIE,UAAU,GAAGD,UAAU,CAAC,CAAD,CAF3B;AAAA,MAGIE,aAAa,GAAGF,UAAU,CAAC,CAAD,CAH9B;;AAKA/B,EAAAA,SAAS,CAAC,YAAY;AACpB;AACA,QAAI,CAAC2B,MAAD,IAAW,CAACtB,KAAK,CAAC6B,OAAN,CAAcF,UAAd,EAA0BtB,IAA1B,CAAhB,EAAiD;AAC/CuB,MAAAA,aAAa,CAACvB,IAAD,CAAb;AACD;AACF,GALQ,EAKN,CAACA,IAAD,EAAOiB,MAAP,EAAeK,UAAf,EAA2B3B,KAA3B,CALM,CAAT;AAMA,MAAI8B,UAAU,GAAGrC,WAAW,CAAC,UAAUsC,YAAV,EAAwB;AACnDR,IAAAA,SAAS,CAAC,KAAD,CAAT;;AAEAN,IAAAA,SAAS,CAACc,YAAD,CAAT;;AAEA,QAAIf,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACe,YAAD,CAAR;AACD;AACF,GAR2B,EAQzB,CAACf,QAAD,EAAWC,SAAX,EAAsBM,SAAtB,CARyB,CAA5B;AASA,MAAIS,YAAY,GAAGpC,OAAO,CAAC,YAAY;AACrC,WAAO;AACLe,MAAAA,MAAM,EAAEA,MADH;AAELsB,MAAAA,IAAI,EAAEX,MAFD;AAGLY,MAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,eAAOJ,UAAU,CAAC,IAAD,CAAjB;AACD,OALI;AAMLd,MAAAA,QAAQ,EAAE,SAASA,QAAT,GAAoB;AAC5B,eAAOc,UAAU,CAACH,UAAD,CAAjB;AACD,OARI;AASLQ,MAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,eAAOP,aAAa,CAAC5B,KAAK,CAACK,IAAN,EAAD,CAApB;AACD,OAXI;AAYL+B,MAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9Bb,QAAAA,SAAS,CAAC,KAAD,CAAT;AACD;AAdI,KAAP;AAgBD,GAjByB,EAiBvB,CAACO,UAAD,EAAanB,MAAb,EAAqBW,MAArB,EAA6BK,UAA7B,EAAyCJ,SAAzC,EAAoDvB,KAApD,CAjBuB,CAA1B;AAkBA,MAAIqC,WAAW,GAAGzC,OAAO,CAAC,YAAY;AACpC,WAAO;AACLS,MAAAA,IAAI,EAAEsB,UADD;AAELT,MAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBoB,OAAlB,EAA2B;AACnC,YAAIC,QAAQ,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAnF;AACAZ,QAAAA,aAAa,CAACU,OAAD,CAAb;;AAEA,YAAIC,QAAQ,IAAIzB,MAAhB,EAAwB;AACtBgB,UAAAA,UAAU,CAACQ,OAAD,CAAV;AACA;AACD,SAPkC,CAOjC;;;AAGF,YAAIlB,OAAO,KAAK,QAAZ,IAAwBA,OAAO,KAAK,QAAxC,EAAkD;AAChDH,UAAAA,SAAS,CAACqB,OAAD,CAAT;;AAEAtB,UAAAA,QAAQ,IAAIA,QAAQ,CAACsB,OAAD,CAApB;AACD;AACF;AAjBI,KAAP;AAmBD,GApBwB,EAoBtB,CAACR,UAAD,EAAahB,MAAb,EAAqBE,QAArB,EAA+BC,SAA/B,EAA0CU,UAA1C,EAAsDP,OAAtD,CApBsB,CAAzB;AAqBA,MAAIuB,eAAe,GAAGnD,QAAQ,CAACU,KAAD,EAAQF,KAAR,EAAeS,KAAf,CAA9B;AACAd,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIgD,eAAe,IAAIxB,OAAvB,EAAgC;AAC9BA,MAAAA,OAAO,CAACwB,eAAD,EAAkBzC,KAAlB,CAAP;AACD;AACF,GAJQ,EAIN,CAACiB,OAAD,EAAUwB,eAAV,EAA2BzC,KAA3B,CAJM,CAAT;AAKA,MAAI0C,UAAU,GAAGrD,cAAc,CAACc,IAAD,EAAOM,MAAP,EAAeX,KAAf,EAAsBE,KAAK,KAAK,IAAhC,EAAsCO,KAAtC,CAA/B;AACA,MAAIoC,UAAU,GAAGjD,OAAO,CAAC,YAAY;AACnC,WAAO;AACLgD,MAAAA,UAAU,EAAEA,UADP;AAELD,MAAAA,eAAe,EAAEA,eAFZ;AAGLG,MAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,eAAO,CAAC/B,QAAD,IAAaQ,SAAS,CAAC,IAAD,CAA7B;AACD;AALI,KAAP;AAOD,GARuB,EAQrB,CAACR,QAAD,EAAW6B,UAAX,EAAuBrB,SAAvB,EAAkCoB,eAAlC,CARqB,CAAxB;AASA,MAAII,WAAW,GAAG;AAChBV,IAAAA,WAAW,EAAEA,WADG;AAEhBQ,IAAAA,UAAU,EAAEA,UAFI;AAGhBb,IAAAA,YAAY,EAAEA;AAHE,GAAlB;AAKAtC,EAAAA,aAAa,CAACqD,WAAD,CAAb;AACA,SAAOA,WAAP;AACD","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\r\nimport { useUtils } from './useUtils';\r\nimport { useOpenState } from './useOpenState';\r\nimport { getDisplayDate, validate } from '../../_helpers/text-field-helper';\r\nimport { useCallback, useDebugValue, useEffect, useMemo, useState, useRef } from 'react';\r\n\r\nvar useValueToDate = function useValueToDate(utils, _ref) {\r\n  var value = _ref.value,\r\n      initialFocusedDate = _ref.initialFocusedDate;\r\n  var nowRef = useRef(utils.date());\r\n  var date = utils.date(value || initialFocusedDate || nowRef.current);\r\n  return date && utils.isValid(date) ? date : nowRef.current;\r\n};\r\n\r\nfunction useDateValues(props, options) {\r\n  var utils = useUtils();\r\n  var date = useValueToDate(utils, props);\r\n  var format = props.format || options.getDefaultFormat();\r\n  return {\r\n    date: date,\r\n    format: format\r\n  };\r\n}\r\n\r\nexport function usePickerState(props, options) {\r\n  var autoOk = props.autoOk,\r\n      disabled = props.disabled,\r\n      onAccept = props.onAccept,\r\n      _onChange = props.onChange,\r\n      onError = props.onError,\r\n      value = props.value,\r\n      variant = props.variant;\r\n  var utils = useUtils();\r\n\r\n  var _useOpenState = useOpenState(props),\r\n      isOpen = _useOpenState.isOpen,\r\n      setIsOpen = _useOpenState.setIsOpen;\r\n\r\n  var _useDateValues = useDateValues(props, options),\r\n      date = _useDateValues.date,\r\n      format = _useDateValues.format;\r\n\r\n  var _useState = useState(date),\r\n      _useState2 = _slicedToArray(_useState, 2),\r\n      pickerDate = _useState2[0],\r\n      setPickerDate = _useState2[1];\r\n\r\n  useEffect(function () {\r\n    // if value was changed in closed state - treat it as accepted\r\n    if (!isOpen && !utils.isEqual(pickerDate, date)) {\r\n      setPickerDate(date);\r\n    }\r\n  }, [date, isOpen, pickerDate, utils]);\r\n  var acceptDate = useCallback(function (acceptedDate) {\r\n    setIsOpen(false);\r\n\r\n    _onChange(acceptedDate);\r\n\r\n    if (onAccept) {\r\n      onAccept(acceptedDate);\r\n    }\r\n  }, [onAccept, _onChange, setIsOpen]);\r\n  var wrapperProps = useMemo(function () {\r\n    return {\r\n      format: format,\r\n      open: isOpen,\r\n      onClear: function onClear() {\r\n        return acceptDate(null);\r\n      },\r\n      onAccept: function onAccept() {\r\n        return acceptDate(pickerDate);\r\n      },\r\n      onSetToday: function onSetToday() {\r\n        return setPickerDate(utils.date());\r\n      },\r\n      onDismiss: function onDismiss() {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n  }, [acceptDate, format, isOpen, pickerDate, setIsOpen, utils]);\r\n  var pickerProps = useMemo(function () {\r\n    return {\r\n      date: pickerDate,\r\n      onChange: function onChange(newDate) {\r\n        var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\r\n        setPickerDate(newDate);\r\n\r\n        if (isFinish && autoOk) {\r\n          acceptDate(newDate);\r\n          return;\r\n        } // simulate autoOk, but do not close the modal\r\n\r\n\r\n        if (variant === 'inline' || variant === 'static') {\r\n          _onChange(newDate);\r\n\r\n          onAccept && onAccept(newDate);\r\n        }\r\n      }\r\n    };\r\n  }, [acceptDate, autoOk, onAccept, _onChange, pickerDate, variant]);\r\n  var validationError = validate(value, utils, props);\r\n  useEffect(function () {\r\n    if (validationError && onError) {\r\n      onError(validationError, value);\r\n    }\r\n  }, [onError, validationError, value]);\r\n  var inputValue = getDisplayDate(date, format, utils, value === null, props);\r\n  var inputProps = useMemo(function () {\r\n    return {\r\n      inputValue: inputValue,\r\n      validationError: validationError,\r\n      onClick: function onClick() {\r\n        return !disabled && setIsOpen(true);\r\n      }\r\n    };\r\n  }, [disabled, inputValue, setIsOpen, validationError]);\r\n  var pickerState = {\r\n    pickerProps: pickerProps,\r\n    inputProps: inputProps,\r\n    wrapperProps: wrapperProps\r\n  };\r\n  useDebugValue(pickerState);\r\n  return pickerState;\r\n}"]},"metadata":{},"sourceType":"module"}
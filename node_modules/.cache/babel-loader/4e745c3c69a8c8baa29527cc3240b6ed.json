{"ast":null,"code":"var global = require('../internals/global');\n\nvar bind = require('../internals/function-bind-context');\n\nvar call = require('../internals/function-call');\n\nvar anObject = require('../internals/an-object');\n\nvar tryToString = require('../internals/try-to-string');\n\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\n\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\n\nvar getIterator = require('../internals/get-iterator');\n\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nvar iteratorClose = require('../internals/iterator-close');\n\nvar TypeError = global.TypeError;\n\nvar Result = function Result(stopped, result) {\n  this.stopped = stopped;\n  this.result = result;\n};\n\nvar ResultPrototype = Result.prototype;\n\nmodule.exports = function (iterable, unboundFunction, options) {\n  var that = options && options.that;\n  var AS_ENTRIES = !!(options && options.AS_ENTRIES);\n  var IS_ITERATOR = !!(options && options.IS_ITERATOR);\n  var INTERRUPTED = !!(options && options.INTERRUPTED);\n  var fn = bind(unboundFunction, that);\n  var iterator, iterFn, index, length, result, next, step;\n\n  var stop = function stop(condition) {\n    if (iterator) iteratorClose(iterator, 'normal', condition);\n    return new Result(true, condition);\n  };\n\n  var callFn = function callFn(value) {\n    if (AS_ENTRIES) {\n      anObject(value);\n      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\n    }\n\n    return INTERRUPTED ? fn(value, stop) : fn(value);\n  };\n\n  if (IS_ITERATOR) {\n    iterator = iterable;\n  } else {\n    iterFn = getIteratorMethod(iterable);\n    if (!iterFn) throw TypeError(tryToString(iterable) + ' is not iterable'); // optimisation for array iterators\n\n    if (isArrayIteratorMethod(iterFn)) {\n      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {\n        result = callFn(iterable[index]);\n        if (result && isPrototypeOf(ResultPrototype, result)) return result;\n      }\n\n      return new Result(false);\n    }\n\n    iterator = getIterator(iterable, iterFn);\n  }\n\n  next = iterator.next;\n\n  while (!(step = call(next, iterator)).done) {\n    try {\n      result = callFn(step.value);\n    } catch (error) {\n      iteratorClose(iterator, 'throw', error);\n    }\n\n    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;\n  }\n\n  return new Result(false);\n};","map":{"version":3,"sources":["E:/College-ERP/node_modules/core-js/internals/iterate.js"],"names":["global","require","bind","call","anObject","tryToString","isArrayIteratorMethod","lengthOfArrayLike","isPrototypeOf","getIterator","getIteratorMethod","iteratorClose","TypeError","Result","stopped","result","ResultPrototype","prototype","module","exports","iterable","unboundFunction","options","that","AS_ENTRIES","IS_ITERATOR","INTERRUPTED","fn","iterator","iterFn","index","length","next","step","stop","condition","callFn","value","done","error"],"mappings":"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","sourcesContent":["var global = require('../internals/global');\r\nvar bind = require('../internals/function-bind-context');\r\nvar call = require('../internals/function-call');\r\nvar anObject = require('../internals/an-object');\r\nvar tryToString = require('../internals/try-to-string');\r\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\r\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\r\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\r\nvar getIterator = require('../internals/get-iterator');\r\nvar getIteratorMethod = require('../internals/get-iterator-method');\r\nvar iteratorClose = require('../internals/iterator-close');\r\n\r\nvar TypeError = global.TypeError;\r\n\r\nvar Result = function (stopped, result) {\r\n  this.stopped = stopped;\r\n  this.result = result;\r\n};\r\n\r\nvar ResultPrototype = Result.prototype;\r\n\r\nmodule.exports = function (iterable, unboundFunction, options) {\r\n  var that = options && options.that;\r\n  var AS_ENTRIES = !!(options && options.AS_ENTRIES);\r\n  var IS_ITERATOR = !!(options && options.IS_ITERATOR);\r\n  var INTERRUPTED = !!(options && options.INTERRUPTED);\r\n  var fn = bind(unboundFunction, that);\r\n  var iterator, iterFn, index, length, result, next, step;\r\n\r\n  var stop = function (condition) {\r\n    if (iterator) iteratorClose(iterator, 'normal', condition);\r\n    return new Result(true, condition);\r\n  };\r\n\r\n  var callFn = function (value) {\r\n    if (AS_ENTRIES) {\r\n      anObject(value);\r\n      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);\r\n    } return INTERRUPTED ? fn(value, stop) : fn(value);\r\n  };\r\n\r\n  if (IS_ITERATOR) {\r\n    iterator = iterable;\r\n  } else {\r\n    iterFn = getIteratorMethod(iterable);\r\n    if (!iterFn) throw TypeError(tryToString(iterable) + ' is not iterable');\r\n    // optimisation for array iterators\r\n    if (isArrayIteratorMethod(iterFn)) {\r\n      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {\r\n        result = callFn(iterable[index]);\r\n        if (result && isPrototypeOf(ResultPrototype, result)) return result;\r\n      } return new Result(false);\r\n    }\r\n    iterator = getIterator(iterable, iterFn);\r\n  }\r\n\r\n  next = iterator.next;\r\n  while (!(step = call(next, iterator)).done) {\r\n    try {\r\n      result = callFn(step.value);\r\n    } catch (error) {\r\n      iteratorClose(iterator, 'throw', error);\r\n    }\r\n    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;\r\n  } return new Result(false);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}
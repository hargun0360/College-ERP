{"ast":null,"code":"import * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var DEFAULT_MODE_STORAGE_KEY = 'mui-mode';\nexport var DEFAULT_COLOR_SCHEME_STORAGE_KEY = 'mui-color-scheme';\nexport var DEFAULT_ATTRIBUTE = 'data-mui-color-scheme';\nexport default function getInitColorSchemeScript(options) {\n  var _ref = options || {},\n      enableSystem = _ref.enableSystem,\n      _ref$defaultLightColo = _ref.defaultLightColorScheme,\n      defaultLightColorScheme = _ref$defaultLightColo === void 0 ? 'light' : _ref$defaultLightColo,\n      _ref$defaultDarkColor = _ref.defaultDarkColorScheme,\n      defaultDarkColorScheme = _ref$defaultDarkColor === void 0 ? 'dark' : _ref$defaultDarkColor,\n      _ref$modeStorageKey = _ref.modeStorageKey,\n      modeStorageKey = _ref$modeStorageKey === void 0 ? DEFAULT_MODE_STORAGE_KEY : _ref$modeStorageKey,\n      _ref$colorSchemeStora = _ref.colorSchemeStorageKey,\n      colorSchemeStorageKey = _ref$colorSchemeStora === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _ref$colorSchemeStora,\n      _ref$attribute = _ref.attribute,\n      attribute = _ref$attribute === void 0 ? DEFAULT_ATTRIBUTE : _ref$attribute;\n\n  return /*#__PURE__*/_jsx(\"script\", {\n    // eslint-disable-next-line react/no-danger\n    dangerouslySetInnerHTML: {\n      __html: \"(function() { try {\\n        var mode = localStorage.getItem('\".concat(modeStorageKey, \"');\\n        var colorScheme = '';\\n        if (mode === 'system' || (!mode && !!\").concat(enableSystem, \")) {\\n          // handle system mode\\n          var mql = window.matchMedia('(prefers-color-scheme: dark)');\\n          if (mql.matches) {\\n            colorScheme = localStorage.getItem('\").concat(colorSchemeStorageKey, \"-dark') || '\").concat(defaultDarkColorScheme, \"';\\n          } else {\\n            colorScheme = localStorage.getItem('\").concat(colorSchemeStorageKey, \"-light') || '\").concat(defaultLightColorScheme, \"';\\n          }\\n        }\\n        if (mode === 'light') {\\n          colorScheme = localStorage.getItem('\").concat(colorSchemeStorageKey, \"-light') || '\").concat(defaultLightColorScheme, \"';\\n        }\\n        if (mode === 'dark') {\\n          colorScheme = localStorage.getItem('\").concat(colorSchemeStorageKey, \"-dark') || '\").concat(defaultDarkColorScheme, \"';\\n        }\\n        if (colorScheme) {\\n          document.documentElement.setAttribute('\").concat(attribute, \"', colorScheme);\\n        }\\n      } catch (e) {} })();\")\n    }\n  });\n}","map":{"version":3,"sources":["E:/College-ERP/node_modules/@mui/system/esm/cssVars/getInitColorSchemeScript.js"],"names":["React","jsx","_jsx","DEFAULT_MODE_STORAGE_KEY","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_ATTRIBUTE","getInitColorSchemeScript","options","enableSystem","defaultLightColorScheme","defaultDarkColorScheme","modeStorageKey","colorSchemeStorageKey","attribute","dangerouslySetInnerHTML","__html"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,OAAO,IAAMC,wBAAwB,GAAG,UAAjC;AACP,OAAO,IAAMC,gCAAgC,GAAG,kBAAzC;AACP,OAAO,IAAMC,iBAAiB,GAAG,uBAA1B;AACP,eAAe,SAASC,wBAAT,CAAkCC,OAAlC,EAA2C;AACxD,aAOIA,OAAO,IAAI,EAPf;AAAA,MACEC,YADF,QACEA,YADF;AAAA,mCAEEC,uBAFF;AAAA,MAEEA,uBAFF,sCAE4B,OAF5B;AAAA,mCAGEC,sBAHF;AAAA,MAGEA,sBAHF,sCAG2B,MAH3B;AAAA,iCAIEC,cAJF;AAAA,MAIEA,cAJF,oCAImBR,wBAJnB;AAAA,mCAKES,qBALF;AAAA,MAKEA,qBALF,sCAK0BR,gCAL1B;AAAA,4BAMES,SANF;AAAA,MAMEA,SANF,+BAMcR,iBANd;;AAQA,SAAO,aAAaH,IAAI,CAAC,QAAD,EAAW;AACjC;AACAY,IAAAA,uBAAuB,EAAE;AACvBC,MAAAA,MAAM,0EAC+BJ,cAD/B,8FAGmCH,YAHnC,0MAOsCI,qBAPtC,yBAO0EF,sBAP1E,qFASsCE,qBATtC,0BAS2EH,uBAT3E,wHAaoCG,qBAbpC,0BAayEH,uBAbzE,0GAgBoCG,qBAhBpC,yBAgBwEF,sBAhBxE,yGAmBuCG,SAnBvC;AADiB;AAFQ,GAAX,CAAxB;AA2BD","sourcesContent":["import * as React from 'react';\r\nimport { jsx as _jsx } from \"react/jsx-runtime\";\r\nexport const DEFAULT_MODE_STORAGE_KEY = 'mui-mode';\r\nexport const DEFAULT_COLOR_SCHEME_STORAGE_KEY = 'mui-color-scheme';\r\nexport const DEFAULT_ATTRIBUTE = 'data-mui-color-scheme';\r\nexport default function getInitColorSchemeScript(options) {\r\n  const {\r\n    enableSystem,\r\n    defaultLightColorScheme = 'light',\r\n    defaultDarkColorScheme = 'dark',\r\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\r\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\r\n    attribute = DEFAULT_ATTRIBUTE\r\n  } = options || {};\r\n  return /*#__PURE__*/_jsx(\"script\", {\r\n    // eslint-disable-next-line react/no-danger\r\n    dangerouslySetInnerHTML: {\r\n      __html: `(function() { try {\r\n        var mode = localStorage.getItem('${modeStorageKey}');\r\n        var colorScheme = '';\r\n        if (mode === 'system' || (!mode && !!${enableSystem})) {\r\n          // handle system mode\r\n          var mql = window.matchMedia('(prefers-color-scheme: dark)');\r\n          if (mql.matches) {\r\n            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';\r\n          } else {\r\n            colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';\r\n          }\r\n        }\r\n        if (mode === 'light') {\r\n          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';\r\n        }\r\n        if (mode === 'dark') {\r\n          colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';\r\n        }\r\n        if (colorScheme) {\r\n          document.documentElement.setAttribute('${attribute}', colorScheme);\r\n        }\r\n      } catch (e) {} })();`\r\n    }\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}
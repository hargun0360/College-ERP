{"ast":null,"code":"'use strict';\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar PROPER_FUNCTION_NAME = require('../internals/function-name').PROPER;\n\nvar redefine = require('../internals/redefine');\n\nvar anObject = require('../internals/an-object');\n\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\n\nvar $toString = require('../internals/to-string');\n\nvar fails = require('../internals/fails');\n\nvar regExpFlags = require('../internals/regexp-flags');\n\nvar TO_STRING = 'toString';\nvar RegExpPrototype = RegExp.prototype;\nvar n$ToString = RegExpPrototype[TO_STRING];\nvar getFlags = uncurryThis(regExpFlags);\nvar NOT_GENERIC = fails(function () {\n  return n$ToString.call({\n    source: 'a',\n    flags: 'b'\n  }) != '/a/b';\n}); // FF44- RegExp#toString has a wrong name\n\nvar INCORRECT_NAME = PROPER_FUNCTION_NAME && n$ToString.name != TO_STRING; // `RegExp.prototype.toString` method\n// https://tc39.es/ecma262/#sec-regexp.prototype.tostring\n\nif (NOT_GENERIC || INCORRECT_NAME) {\n  redefine(RegExp.prototype, TO_STRING, function toString() {\n    var R = anObject(this);\n    var p = $toString(R.source);\n    var rf = R.flags;\n    var f = $toString(rf === undefined && isPrototypeOf(RegExpPrototype, R) && !('flags' in RegExpPrototype) ? getFlags(R) : rf);\n    return '/' + p + '/' + f;\n  }, {\n    unsafe: true\n  });\n}","map":{"version":3,"sources":["E:/project1/project/src/node_modules/core-js/modules/es.regexp.to-string.js"],"names":["uncurryThis","require","PROPER_FUNCTION_NAME","PROPER","redefine","anObject","isPrototypeOf","$toString","fails","regExpFlags","TO_STRING","RegExpPrototype","RegExp","prototype","n$ToString","getFlags","NOT_GENERIC","call","source","flags","INCORRECT_NAME","name","toString","R","p","rf","f","undefined","unsafe"],"mappings":"AAAA;;AACA,IAAIA,WAAW,GAAGC,OAAO,CAAC,oCAAD,CAAzB;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,4BAAD,CAAP,CAAsCE,MAAjE;;AACA,IAAIC,QAAQ,GAAGH,OAAO,CAAC,uBAAD,CAAtB;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIK,aAAa,GAAGL,OAAO,CAAC,qCAAD,CAA3B;;AACA,IAAIM,SAAS,GAAGN,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAIO,KAAK,GAAGP,OAAO,CAAC,oBAAD,CAAnB;;AACA,IAAIQ,WAAW,GAAGR,OAAO,CAAC,2BAAD,CAAzB;;AAEA,IAAIS,SAAS,GAAG,UAAhB;AACA,IAAIC,eAAe,GAAGC,MAAM,CAACC,SAA7B;AACA,IAAIC,UAAU,GAAGH,eAAe,CAACD,SAAD,CAAhC;AACA,IAAIK,QAAQ,GAAGf,WAAW,CAACS,WAAD,CAA1B;AAEA,IAAIO,WAAW,GAAGR,KAAK,CAAC,YAAY;AAAE,SAAOM,UAAU,CAACG,IAAX,CAAgB;AAAEC,IAAAA,MAAM,EAAE,GAAV;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAAhB,KAAgD,MAAvD;AAAgE,CAA/E,CAAvB,C,CACA;;AACA,IAAIC,cAAc,GAAGlB,oBAAoB,IAAIY,UAAU,CAACO,IAAX,IAAmBX,SAAhE,C,CAEA;AACA;;AACA,IAAIM,WAAW,IAAII,cAAnB,EAAmC;AACjChB,EAAAA,QAAQ,CAACQ,MAAM,CAACC,SAAR,EAAmBH,SAAnB,EAA8B,SAASY,QAAT,GAAoB;AACxD,QAAIC,CAAC,GAAGlB,QAAQ,CAAC,IAAD,CAAhB;AACA,QAAImB,CAAC,GAAGjB,SAAS,CAACgB,CAAC,CAACL,MAAH,CAAjB;AACA,QAAIO,EAAE,GAAGF,CAAC,CAACJ,KAAX;AACA,QAAIO,CAAC,GAAGnB,SAAS,CAACkB,EAAE,KAAKE,SAAP,IAAoBrB,aAAa,CAACK,eAAD,EAAkBY,CAAlB,CAAjC,IAAyD,EAAE,WAAWZ,eAAb,CAAzD,GAAyFI,QAAQ,CAACQ,CAAD,CAAjG,GAAuGE,EAAxG,CAAjB;AACA,WAAO,MAAMD,CAAN,GAAU,GAAV,GAAgBE,CAAvB;AACD,GANO,EAML;AAAEE,IAAAA,MAAM,EAAE;AAAV,GANK,CAAR;AAOD","sourcesContent":["'use strict';\r\nvar uncurryThis = require('../internals/function-uncurry-this');\r\nvar PROPER_FUNCTION_NAME = require('../internals/function-name').PROPER;\r\nvar redefine = require('../internals/redefine');\r\nvar anObject = require('../internals/an-object');\r\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\r\nvar $toString = require('../internals/to-string');\r\nvar fails = require('../internals/fails');\r\nvar regExpFlags = require('../internals/regexp-flags');\r\n\r\nvar TO_STRING = 'toString';\r\nvar RegExpPrototype = RegExp.prototype;\r\nvar n$ToString = RegExpPrototype[TO_STRING];\r\nvar getFlags = uncurryThis(regExpFlags);\r\n\r\nvar NOT_GENERIC = fails(function () { return n$ToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });\r\n// FF44- RegExp#toString has a wrong name\r\nvar INCORRECT_NAME = PROPER_FUNCTION_NAME && n$ToString.name != TO_STRING;\r\n\r\n// `RegExp.prototype.toString` method\r\n// https://tc39.es/ecma262/#sec-regexp.prototype.tostring\r\nif (NOT_GENERIC || INCORRECT_NAME) {\r\n  redefine(RegExp.prototype, TO_STRING, function toString() {\r\n    var R = anObject(this);\r\n    var p = $toString(R.source);\r\n    var rf = R.flags;\r\n    var f = $toString(rf === undefined && isPrototypeOf(RegExpPrototype, R) && !('flags' in RegExpPrototype) ? getFlags(R) : rf);\r\n    return '/' + p + '/' + f;\r\n  }, { unsafe: true });\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
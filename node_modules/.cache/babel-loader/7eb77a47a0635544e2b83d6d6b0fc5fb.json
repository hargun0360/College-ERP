{"ast":null,"code":"import toDate from '../../toDate/index.js';\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js';\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js';\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","map":{"version":3,"sources":["E:/project1/project/src/node_modules/material-table/node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js"],"names":["toDate","startOfUTCISOWeek","startOfUTCISOWeekYear","MILLISECONDS_IN_WEEK","getUTCISOWeek","dirtyDate","arguments","length","TypeError","date","diff","getTime","Math","round"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,uBAAnB;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,qBAAP,MAAkC,mCAAlC;AAEA,IAAIC,oBAAoB,GAAG,SAA3B,C,CAEA;AACA;;AACA,eAAe,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;AAC/C,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,UAAM,IAAIC,SAAJ,CACJ,mCAAmCF,SAAS,CAACC,MAA7C,GAAsD,UADlD,CAAN;AAGD;;AAED,MAAIE,IAAI,GAAGT,MAAM,CAACK,SAAD,CAAjB;AACA,MAAIK,IAAI,GACNT,iBAAiB,CAACQ,IAAD,CAAjB,CAAwBE,OAAxB,KAAoCT,qBAAqB,CAACO,IAAD,CAArB,CAA4BE,OAA5B,EADtC,CAR+C,CAW/C;AACA;AACA;;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAGP,oBAAlB,IAA0C,CAAjD;AACD","sourcesContent":["import toDate from '../../toDate/index.js'\r\nimport startOfUTCISOWeek from '../startOfUTCISOWeek/index.js'\r\nimport startOfUTCISOWeekYear from '../startOfUTCISOWeekYear/index.js'\r\n\r\nvar MILLISECONDS_IN_WEEK = 604800000\r\n\r\n// This function will be a part of public API when UTC function will be implemented.\r\n// See issue: https://github.com/date-fns/date-fns/issues/376\r\nexport default function getUTCISOWeek(dirtyDate) {\r\n  if (arguments.length < 1) {\r\n    throw new TypeError(\r\n      '1 argument required, but only ' + arguments.length + ' present'\r\n    )\r\n  }\r\n\r\n  var date = toDate(dirtyDate)\r\n  var diff =\r\n    startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime()\r\n\r\n  // Round the number of days to the nearest integer\r\n  // because the number of milliseconds in a week is not constant\r\n  // (e.g. it's different in the week of the daylight saving time clock shift)\r\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
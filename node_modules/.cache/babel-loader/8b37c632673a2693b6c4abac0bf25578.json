{"ast":null,"code":"import axios from 'axios';\nimport url from './BackendUrl';\nconst instance = axios.create({\n  baseURL: url\n});\ninstance.interceptors.response.use(response => {\n  return response;\n}, function (error) {\n  const originalRequest = error.config;\n  console.log(originalRequest);\n\n  if (error) {\n    if (error.response.status === 401 && originalRequest.url === url + \"auth/token\") {\n      localStorage.clear();\n      window.location.href = '/Login';\n      return Promise.reject(error);\n    }\n\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      const refreshToken = localStorage.getItem('ref_token');\n\n      if (refreshToken) {\n        console.log(\"calling reqqq\");\n        return axios.post(url + 'auth/token/', {\n          refresh_token: refreshToken\n        }, {\n          headers: {\n            Authorization: 'Bearer ' + refreshToken\n          }\n        }).then(res => {\n          if (res.status === 201 || res.status === 200) {\n            console.log(\"sucess\");\n            localStorage.setItem(\"ref_token\", res.data.refresh_token);\n            localStorage.setItem(\"user\", res.data.access_token);\n            originalRequest.headers[\"Authorization\"] = 'Bearer ' + localStorage.getItem('user');\n            return axios(originalRequest);\n          }\n        }).catch(err => {\n          console.log(err.response);\n          localStorage.clear();\n          window.location.href = '/Login';\n        });\n      } else {\n        console.log(\"No ref token was found\");\n        localStorage.clear();\n        return window.location.href = '/Login';\n      }\n    }\n  }\n\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"sources":["E:/project1/project/src/ApiServices/Interceptor.js"],"names":["axios","url","instance","create","baseURL","interceptors","response","use","error","originalRequest","config","console","log","status","localStorage","clear","window","location","href","Promise","reject","_retry","refreshToken","getItem","post","refresh_token","headers","Authorization","then","res","setItem","data","access_token","catch","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAN,CACb;AACIC,EAAAA,OAAO,EAAEH;AADb,CADa,CAAjB;AAOAC,QAAQ,CAACG,YAAT,CAAsBC,QAAtB,CAA+BC,GAA/B,CAAoCD,QAAD,IAAc;AAC7C,SAAOA,QAAP;AACF,CAFF,EAEI,UAAUE,KAAV,EAAiB;AAEjB,QAAMC,eAAe,GAAGD,KAAK,CAACE,MAA9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ;;AAEA,MAAGD,KAAH,EAAS;AACL,QAAIA,KAAK,CAACF,QAAN,CAAeO,MAAf,KAA0B,GAA1B,IAAiCJ,eAAe,CAACR,GAAhB,KAAwBA,GAAG,GAAG,YAAnE,EAAiF;AAC7Ea,MAAAA,YAAY,CAACC,KAAb;AACAC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeZ,KAAf,CAAP;AACH;;AAED,QAAIA,KAAK,CAACF,QAAN,CAAeO,MAAf,KAA0B,GAA1B,IAAiC,CAACJ,eAAe,CAACY,MAAtD,EAA8D;AAE1DZ,MAAAA,eAAe,CAACY,MAAhB,GAAyB,IAAzB;AACA,YAAMC,YAAY,GAAGR,YAAY,CAACS,OAAb,CAAqB,WAArB,CAArB;;AACA,UAAGD,YAAH,EAAgB;AACZX,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,eAAOZ,KAAK,CAACwB,IAAN,CAAWvB,GAAG,GAAG,aAAjB,EAAgC;AAACwB,UAAAA,aAAa,EAACH;AAAf,SAAhC,EACP;AACII,UAAAA,OAAO,EAAE;AACLC,YAAAA,aAAa,EAAE,YAAWL;AADrB;AADb,SADO,EAMNM,IANM,CAMDC,GAAG,IAAI;AACT,cAAIA,GAAG,CAAChB,MAAJ,KAAe,GAAf,IAAsBgB,GAAG,CAAChB,MAAJ,KAAc,GAAxC,EAA6C;AACzCF,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAE,YAAAA,YAAY,CAACgB,OAAb,CAAqB,WAArB,EAAiCD,GAAG,CAACE,IAAJ,CAASN,aAA1C;AACAX,YAAAA,YAAY,CAACgB,OAAb,CAAqB,MAArB,EAA4BD,GAAG,CAACE,IAAJ,CAASC,YAArC;AACAvB,YAAAA,eAAe,CAACiB,OAAhB,CAAwB,eAAxB,IAA2C,YAAYZ,YAAY,CAACS,OAAb,CAAqB,MAArB,CAAvD;AACA,mBAAOvB,KAAK,CAACS,eAAD,CAAZ;AACH;AACJ,SAdM,EAeNwB,KAfM,CAeAC,GAAG,IAAE;AACRvB,UAAAA,OAAO,CAACC,GAAR,CAAYsB,GAAG,CAAC5B,QAAhB;AACAQ,UAAAA,YAAY,CAACC,KAAb;AACAC,UAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACH,SAnBM,CAAP;AAoBH,OAtBD,MAuBK;AACDP,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACAE,QAAAA,YAAY,CAACC,KAAb;AACA,eAAOC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAA9B;AAEH;AAEJ;AACJ;;AAGD,SAAOC,OAAO,CAACC,MAAR,CAAeZ,KAAf,CAAP;AACF,CArDF;AAuDA,eAAeN,QAAf","sourcesContent":["import axios from 'axios';\r\nimport url from './BackendUrl';\r\n\r\nconst instance = axios.create(\r\n    {\r\n        baseURL: url\r\n    }\r\n\r\n);\r\n\r\ninstance.interceptors.response.use((response) => {\r\n    return response\r\n }, function (error) {\r\n\r\n    const originalRequest = error.config;\r\n    console.log(originalRequest);\r\n    \r\n    if(error){\r\n        if (error.response.status === 401 && originalRequest.url === url + \"auth/token\") {\r\n            localStorage.clear()\r\n            window.location.href = '/Login'\r\n            return Promise.reject(error);\r\n        }\r\n     \r\n        if (error.response.status === 401 && !originalRequest._retry) {\r\n     \r\n            originalRequest._retry = true;\r\n            const refreshToken = localStorage.getItem('ref_token');\r\n            if(refreshToken){\r\n                console.log(\"calling reqqq\")\r\n                return axios.post(url + 'auth/token/', {refresh_token:refreshToken},\r\n                {\r\n                    headers: {\r\n                        Authorization: 'Bearer '+ refreshToken\r\n                    }\r\n                })\r\n                .then(res => {\r\n                    if (res.status === 201 || res.status=== 200) {\r\n                        console.log(\"sucess\")\r\n                        localStorage.setItem(\"ref_token\",res.data.refresh_token);\r\n                        localStorage.setItem(\"user\",res.data.access_token);\r\n                        originalRequest.headers[\"Authorization\"] = 'Bearer ' + localStorage.getItem('user');\r\n                        return axios(originalRequest);\r\n                    }\r\n                })\r\n                .catch(err=>{\r\n                    console.log(err.response);\r\n                    localStorage.clear();\r\n                    window.location.href = '/Login'\r\n                })\r\n            }\r\n            else {\r\n                console.log(\"No ref token was found\")\r\n                localStorage.clear();\r\n                return window.location.href = '/Login'\r\n    \r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n   \r\n    return Promise.reject(error);\r\n });\r\n\r\nexport default instance;"]},"metadata":{},"sourceType":"module"}